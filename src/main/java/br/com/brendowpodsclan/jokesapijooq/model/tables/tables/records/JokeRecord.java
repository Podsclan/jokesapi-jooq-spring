/*
 * This file is generated by jOOQ.
*/
package br.com.brendowpodsclan.jokesapijooq.model.tables.tables.records;


import br.com.brendowpodsclan.jokesapijooq.model.tables.tables.Joke;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JokeRecord extends UpdatableRecordImpl<JokeRecord> implements Record4<Integer, String, String, Integer> {

    private static final long serialVersionUID = 716059001;

    /**
     * Setter for <code>libraryjokes.joke.JOKE_ID</code>.
     */
    public void setJokeId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>libraryjokes.joke.JOKE_ID</code>.
     */
    public Integer getJokeId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>libraryjokes.joke.JOKE_TYPE</code>.
     */
    public void setJokeType(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>libraryjokes.joke.JOKE_TYPE</code>.
     */
    public String getJokeType() {
        return (String) get(1);
    }

    /**
     * Setter for <code>libraryjokes.joke.JOKE_JOKE</code>.
     */
    public void setJokeJoke(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>libraryjokes.joke.JOKE_JOKE</code>.
     */
    public String getJokeJoke() {
        return (String) get(2);
    }

    /**
     * Setter for <code>libraryjokes.joke.JOKE_AUTHORID</code>.
     */
    public void setJokeAuthorid(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>libraryjokes.joke.JOKE_AUTHORID</code>.
     */
    public Integer getJokeAuthorid() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Joke.JOKE.JOKE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Joke.JOKE.JOKE_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Joke.JOKE.JOKE_JOKE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field4() {
        return Joke.JOKE.JOKE_AUTHORID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getJokeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getJokeType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getJokeJoke();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component4() {
        return getJokeAuthorid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getJokeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getJokeType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getJokeJoke();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value4() {
        return getJokeAuthorid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JokeRecord value1(Integer value) {
        setJokeId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JokeRecord value2(String value) {
        setJokeType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JokeRecord value3(String value) {
        setJokeJoke(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JokeRecord value4(Integer value) {
        setJokeAuthorid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JokeRecord values(Integer value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JokeRecord
     */
    public JokeRecord() {
        super(Joke.JOKE);
    }

    /**
     * Create a detached, initialised JokeRecord
     */
    public JokeRecord(Integer jokeId, String jokeType, String jokeJoke, Integer jokeAuthorid) {
        super(Joke.JOKE);

        set(0, jokeId);
        set(1, jokeType);
        set(2, jokeJoke);
        set(3, jokeAuthorid);
    }
}
